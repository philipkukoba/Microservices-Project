# Drop and create new tables (create, create-drop, validate, update)
# Only for testing purpose - comment this in production
spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# MySQL connection properties
# spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.url=jdbc:mysql://localhost:3306/pakketten

# Log JPA queries
# Comment this in production
spring.jpa.show-sql=true

# Kafka

spring.cloud.stream.bindings.orderverzonden_event.destination=orderverzonden_event
spring.cloud.stream.bindings.orderverzonden_event.content-type=application/json

#veranderd voor orderService
spring.cloud.stream.bindings.ordercompleet_event.destination=bestelling_compleet_event 
spring.cloud.stream.bindings.ordercompleet_event.content-type=application/json

spring.cloud.stream.bindings.plaatsgeannuleerdebestellingterug_command.destination=plaatsgeannuleerdebestellingterug_command
spring.cloud.stream.bindings.plaatsgeannuleerdebestellingterug_command.content-type=application/json

spring.cloud.stream.bindings.bestellinggeannuleerd_command.destination=bestellinggeannuleerd_command
spring.cloud.stream.bindings.bestellinggeannuleerd_command.content-type=application/json

spring.cloud.stream.bindings.annuleerbestelling_command.destination=annuleer_bestelling_request
spring.cloud.stream.bindings.annuleerbestelling_command.content-type=application/json

spring.cloud.stream.bindings.annuleer_bestelling_response.content-type=application/json

# test haalrolcontainerop
# spring.cloud.stream.bindings.haal_rolcontainer_op_command.destination=haal_rolcontainer_op_command
# spring.cloud.stream.bindings.haal_rolcontainer_op_command.content-type=application/json



